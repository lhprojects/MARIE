function [ok] = Export_SnP(filename,Zparam,freqs,Type,Zref)
%%    Export Port-parameters to SnP Touchstone format file
% _________________________________________________________________________
%
%
%   Def.: Fucntion to Export Port-parameters to SnP Touchstone format file
%
% _________________________________________________________________________
%
%
%% INPUT
%       filename - name of the file to save
%       Zparam - Z-parameters
%       freqs - frequencies in Hz
%       Type - type of parameter: S, Z or Y (default S)
%       Zref - impedance of reference (default 50 Ohms)
%
%
%% OUTPUT
%       ok
%
%
% -------------------------------------------------------------------------
%
%%   This function is part of MARIE
%   MARIE - Magnetic Resonance Integral Equation suite
%           Jorge Fernandez Villena   -- jvillena@mit.edu
%           Athanasios G. Polimeridis -- thanos_p@mit.edu
%           Copyright © 2014
%           RLE Computational Prototyping Group, MIT
% 
%           This software is free and open source
%           Distributed under the GNU-GPLv3 terms
%           For details see MARIE_license.txt
%
% _________________________________________________________________________
 

% -------------------------------------------------------------------------
% Initialization of variables
% -------------------------------------------------------------------------

if(nargin < 3 )
   fprintf(1, '\n ERROR: not enough arguments\n');
   return
end

if(nargin < 4 || isempty(Type))
   Type = 'S';
end

if(nargin < 5 || isempty(Zref))
   Zref = 50;
end


Nfreqs = length(freqs);
Nports = size(Zparam,1);
freqs = freqs/1e9; % in GHz

% -------------------------------------------------------------------------
% check parameters and compute the desired ones
% -------------------------------------------------------------------------

switch Type
    case 'Z'
        vec = Zparam; % Z parameters
    case 'Y'
        vec = z2y(Zparam); % get the Y parameters
    otherwise
        Type = 'S';
        vec = z2s(Zparam,Zref); % get the S parameters
end


% -------------------------------------------------------------------------
% Open file, write data and store parameters
% -------------------------------------------------------------------------

% snpfilename = sprintf('%s.s%dp',filename,Nports);
% fid = fopen(snpfilename, 'W');
fid = fopen(filename, 'W'); % snp is added outside


% initial data

fprintf(fid, '! %d-port %s-parameter data\n', Nports, Type);
fprintf(fid, '! Default impedance is overridden by the [Reference] keyword arguments\n');
fprintf(fid, '! Data cannot be represented using 1.0 syntax\n');
fprintf(fid, '! Data generated by MARIE - Magnetic Resonance Integral Equation Suite\n');
fprintf(fid, '[Version] 2.0\n');
fprintf(fid, '# GHz %s RI R %3.6f\n', Type, Zref);
fprintf(fid, '[Number of Ports] %d\n', Nports);
if (Nports == 2)
    fprintf(fid, '[Two-Port Data Order] 12_21\n');
end
fprintf(fid, '[Number of Frequencies] %d\n', Nfreqs);
fprintf(fid, '[Reference] %3.6f\n', Zref);

% loop on the frequencies and print the data

switch Nports
    
    case 1
        % 1 port system
        
        fprintf(fid, '[Network Data]\n');
        fprintf(fid, '! FREQ      \tREAL(%s11)     \tIMAG(%s11)\n', Type, Type);
        for kk = 1:Nfreqs
            fprintf(fid, '%1.9f \t%1.9f \t%1.9f\n', freqs(kk), real(vec(1,1,kk)), imag(vec(1,1,kk)));
        end
        
        
    case 2
        % 2 port system
        fprintf(fid, '[Network Data]\n');
        fprintf(fid, '! FREQ      \tREAL(%s11)     \tIMAG(%s11)     \tREAL(%s12)     \tIMAG(%s12)     \tREAL(%s21)     \tIMAG(%s21)     \tREAL(%s22)     \tIMAG(%s22)\n', Type, Type, Type, Type, Type, Type, Type, Type);
        for kk = 1:Nfreqs
            fprintf(fid, '%1.9f ', freqs(kk));
            for ii = 1:Nports
                for jj = 1:Nports
                    fprintf(fid, '\t%1.9f \t%1.9f ', real(vec(ii,jj,kk)), imag(vec(ii,jj,kk)));
                end
            end
            fprintf(fid, '\n');
        end
        
        
    otherwise % storage in lower matrix format
        % N port system
        fprintf(fid, '[Matrix Format] Lower\n');
        fprintf(fid, '[Network Data]\n');
        fprintf(fid, '! FREQ      \tREAL(%s)       \tIMAG(%s)      in lower matrix form\n', Type, Type);
        for kk = 1:Nfreqs
            fprintf(fid, '%1.9f \t%1.9f \t%1.9f \t! row 1\n', freqs(kk), real(vec(1,1,kk)), imag(vec(1,1,kk)));
            for ii = 2:Nports
                fprintf(fid, '            ');
                for jj = 1:ii
                    fprintf(fid, '\t%1.9f \t%1.9f ', real(vec(ii,jj,kk)), imag(vec(ii,jj,kk)));
                end
                fprintf(fid, '\t! row %d\n', ii);
            end  
        end
        
end
    
        
fclose(fid);


% and it is done


